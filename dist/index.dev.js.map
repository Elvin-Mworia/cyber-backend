{"version":3,"sources":["index.js"],"names":["express","require","config","app","cors","db","Sequelize","postrouter","Auth","Malware","Vulns","products","addproduct","productsB","Post","bcrypt","Users","Products","upload","uploadPost","user","comments","mpesa","accessToken","logger","req","res","next","console","log","Allowed_origin","corOption","origin","use","json","urlencoded","extended","port","process","env","PORT","sequelize","sync","logging","force","then","listen","err"],"mappings":"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","sourcesContent":["const express=require('express');\nrequire(\"dotenv\").config();\nconst app=express();\nconst cors=require('cors');\nconst db=require(\"./models\");\nconst Sequelize=require(\"sequelize\");\nconst postrouter=require(\"./routes/post\");\nconst Auth=require(\"./routes/auth\");\nconst Malware=require(\"./routes/malware\");\nconst Vulns=require(\"./routes/vulns\");\nconst products=require(\"./routes/resources\");\nconst addproduct=require(\"./routes/products\");\nconst productsB=require(\"./routes/productsBought\");\n\n\n\nconst {Post}=require(\"./models\");\nconst bcrypt=require(\"bcrypt\");\nconst {Users}=require(\"./models\");\nconst {Products}=require(\"./models\");\nconst upload=require(\"./upload\");\nconst uploadPost=require(\"./uploadPost\");\nconst user=require(\"./routes/users\");\nconst comments=require(\"./routes/Comments\");\nconst mpesa=require(\"./routes/mpesasktpush\");\nconst {accessToken}=require('.//routes/Authmiddleware');\n\n\nconst logger=(req,res,next)=>{\n    console.log(\"incoming request\");\n    next();\n }\n const Allowed_origin=['*'];\n \n\n\nvar corOption={\n    origin:Allowed_origin\n}\napp.use(cors(corOption));\n\napp.use(express.json());\napp.use(express.urlencoded({extended:true}));\n  \napp.use(logger);\n//static files\napp.use(\"/images/product\",express.static(\"images/product\"));\napp.use(\"/images/post\",express.static(\"images/post\"));\n//routers\napp.use(\"/posts\",postrouter);\napp.use(\"/auth\",Auth);\napp.use(\"/malware\",Malware);\napp.use(\"/vulns\",Vulns);\napp.use(\"/resources\",products);\napp.use(\"/user\",user);\napp.use('/addproduct',upload,addproduct);\napp.use(\"/comments\",comments);\napp.use(\"/productBought\",productsB);\napp.use(\"/mpesa-online\",mpesa);\napp.use(\"/mpesa\",accessToken);\n\n\n \n\nconst port=process.env.PORT;\ndb.sequelize.sync({logging:console.log,force:false}).then(()=>{\n    \n    console.log(\"Connection to the database established\");\n    \n    app.listen(port,()=>{\n        console.log(`running on port ${port}`);\n});\n\n}).catch(err=>(console.log(`Something went wrong ${err}`)));\n"],"file":"index.dev.js"}